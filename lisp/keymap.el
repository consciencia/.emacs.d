(cua-mode t)
(setq cua-auto-tabify-rectangles nil)
(transient-mark-mode 1)
(setq cua-keep-region-after-copy t)

(global-set-key (kbd "C-+") 'scroll-up-line)
(global-set-key (kbd "C--") 'scroll-down-line)

(global-set-key (kbd "<f2>") 'neotree-toggle)
(global-set-key (kbd "<f11>") 'list-buffers)
(global-set-key (kbd "<f12>") 'shell)

(global-set-key (kbd "C-3") 'next-multiframe-window)
(global-set-key (kbd "C-1") 'previous-multiframe-window)
(global-set-key (kbd "C-9") 'split-window-horizontally)
(global-set-key (kbd "C-7") 'split-window-vertically)
(global-set-key (kbd "C-4") (ignore-error-wrapper 'windmove-left))
(global-set-key (kbd "C-6") (ignore-error-wrapper 'windmove-right))
(global-set-key (kbd "C-8") (ignore-error-wrapper 'windmove-up))
(global-set-key (kbd "C-2") (ignore-error-wrapper 'windmove-down))
(global-set-key (kbd "C-5") 'ace-window)
(global-set-key (kbd "C-q") (lambda ()
                              (interactive)
                              (let* ((this-window (selected-window))
                                     (this-buffer (window-buffer this-window))
                                     (win-count (length (window-list)))
                                     (frame-count (length (frame-list))))
                                (if (> win-count 1)
                                    (delete-window this-window)
                                  (if (> frame-count 1)
                                      (delete-frame)
                                    (save-buffers-kill-emacs))))))

(global-set-key (kbd "C-o") 'find-file)
(global-set-key (kbd "C-<prior>") 'next-buffer)
(global-set-key (kbd "C-<next>") 'previous-buffer)
(global-set-key (kbd "C-0") 'ido-switch-buffer)
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-w") 'kill-buffer)

(global-set-key (kbd "C-d") 'custom/mark-whole-word)
(global-set-key (kbd "C-l") 'custom/mark-whole-line)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-S-z") 'redo)
(global-set-key (kbd "C-u") 'undo-tree-visualize)
(global-set-key (kbd "C-<right>") 'custom/forward-symbol)
(global-set-key (kbd "C-<left>") 'custom/backward-symbol)
(global-set-key (kbd "C-<down>") 'forward-sexp)
(global-set-key (kbd "C-<up>") 'backward-sexp)
(global-set-key (kbd "C-g") 'goto-line)
(global-set-key (kbd "C-<kp-divide>") 'comment-or-uncomment-region)

(define-prefix-command 'projectile-key-map)
(global-set-key (kbd "C-p") 'projectile-key-map)
(define-key projectile-key-map (kbd "C-s") 'projectile-switch-project)
(define-key projectile-key-map (kbd "C-a") 'projectile-add-known-project)
(define-key projectile-key-map (kbd "C-o") 'projectile-find-file)
(define-key projectile-key-map (kbd "C-f") 'projectile-grep)
(define-key projectile-key-map (kbd "C-r") 'projectile-replace)

(define-prefix-command 'search-key-map)
(global-set-key (kbd "C-f") 'search-key-map)
(define-key search-key-map (kbd "C-r") 'replace-string)
(define-key search-key-map (kbd "C-f") 'isearch-forward)
(define-key search-key-map (kbd "C-s") 'isearch-forward-symbol-at-point)
(define-key search-key-map (kbd "C-o") 'occur)
(add-hook 'isearch-mode-hook (lambda ()
                               (define-key isearch-mode-map
                                 (kbd "C-<right>")
                                 'isearch-repeat-forward)
                               (define-key isearch-mode-map
                                 (kbd "C-<left>")
                                 'isearch-repeat-backward)))
