;; (package-initialize)
;; Placed here to make package manager happy and not insert
;; autogenerated shit here :(

;; (edebug-defun)
;; (setq debug-on-error t)
;; (toggle-debug-on-quit)

;; Detect chnages of emacs version and purge all caches which are
;; notoriously incompatible across emacs versions.
(let* ((write-file (lambda (filename data)
                     (ignore-errors
                       (let ((coding-system-for-write 'binary)
                             (write-region-annotate-functions nil)
                             (write-region-post-annotation-function nil))
                         (write-region data nil filename nil :silent)
                         nil))))
       (read-file (lambda (filename)
                    (ignore-errors
                      (with-temp-buffer
                        (set-buffer-multibyte nil)
                        (setq buffer-file-coding-system 'binary)
                        (insert-file-contents-literally filename)
                        (buffer-substring-no-properties (point-min)
                                                        (point-max))))))
       (root (expand-file-name user-emacs-directory))
       (version-cache-filename (concat root "version.cache"))
       (version-cache (funcall read-file version-cache-filename)))
  (when (not (or (equal version-cache nil)
                 (equal version-cache (emacs-version))))
    (delete-directory (concat root "undo") t t)
    (delete-directory (concat root "semanticdb") t t)
    (delete-directory (concat root "elpa") t t))
  (funcall write-file version-cache-filename (emacs-version)))

;; set correct path separator
(if (eq system-type 'windows-nt)
    (setq custom/fs-separator "\\")
  (setq custom/fs-separator "/"))

;; set up EMACS custom settings file (used by UI settings manager)
(setq custom-file
      (concat (expand-file-name user-emacs-directory)
              "emacs-custom.el"))
(load custom-file)

;; set up EMACS C code tracking
(setq find-function-C-source-directory
      (concat (expand-file-name user-emacs-directory)
              "emacs-src"
              custom/fs-separator
              (substring (emacs-version) 10 14)
              custom/fs-separator
              "src"))

;; set up backup rules
(setq backup-directory-alist
      `(("." . ,(concat (expand-file-name user-emacs-directory)
                        "file-backups"))))

(setq delete-old-versions nil
      kept-new-versions 10
      kept-old-versions 10
      version-control t)

;; Dont create lockfiles. They are pain in the ass in the
;; long run.
(setq create-lockfiles nil)

(load (concat
       (expand-file-name user-emacs-directory)
       "sysdef.el"))
(sysdef/init)

(load "utils.el")
(load "package-loader.el")
(load "db.el")
(load "ui.el")
(load "keymap.el")

(setq *custom/enable-lazy-gc* nil)
(if *custom/enable-lazy-gc*
    (progn
      ;; old value was 800000 (< 1MB)
      ;; new one is 512MB with GC cycle every
      ;; 5 second of iddling
      (setq gc-cons-threshold 536870912)
      (run-with-idle-timer 5 t
                           (lambda ()
                             (garbage-collect)))))

(setq create-lockfiles nil)

;; add Wilfred/helpfull

;; add semantic refactor

;; store somewhere last emacs version
;; when it chnages, remove all elc files from
;; emacs config dir and purge semanticdb
;; do this at the start of this init file

;; create python script for emacs package updates
;; and atomacs source code pull.
;; All with rollback.

;; refactor install script too
;; add install targets --target js --target cpp --target py
;; add some printing options so user can inspect what are emacs
;; dependencies
;; when traget fails, print info for user how to do stuff
;; manually

;; remove sysdef and just group things together in order to make
;; things more modular
;; another thing is to create custom key bind functions in order
;; to collect automatically documentation and make key binds
;; docs generation automatic

;; there's a lot space for enhancements
;; 1) custom dashboard
;; 2) datatype trees
;; 3) call trees
;; 4) typed font lock
;; 5) auto-fill-function is called everytime too long line is created
;;    hook into it with custom logic to create smart c/c++ code breaks.
